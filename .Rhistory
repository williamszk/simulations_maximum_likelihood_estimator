names(output) = c('optimal x','lowest value','steps')
output
}
optimizer_NM_multivariate(f) #test the optimizer function
optimizer_NM_multivariate = function(f) {
alpha = 1
gamma = 2
rho = .5
tolerance = 1e-10 #tolerance epsolon
range1 = 2
x1 = matrix(runif(k,-range1,range1))#an initial x
aux_matrix1 = x1+rnorm(k)
for (kk in 1:(k-1)) { #create matrix of triangulation points
aux_matrix1 = cbind(aux_matrix1,x1+rnorm(k))
}
x = cbind(x1,aux_matrix1)
steps = 1
craker=0
while(craker==0){
#order the vectors
f_values = double()
for (kk in 1:(k+1)) { #create auxiliary vector
f_values[kk] = as.numeric(f(x[,kk]))
}
aux_order1 = order(f_values)
matrix_x2 = x[,aux_order1] #colocar vetores em ordem
x = matrix_x2
#calculate the centroid of the problem x0
aux_centroid = double()
for (kk in 1:k) {
aux_centroid[kk] = mean(x[kk,])
}
x0 = matrix(aux_centroid)
#compute the reflected point
xr = x0 + alpha * (x0 - x[,k+1])
value1 = f(x[,1]) <= f(xr)  & f(xr) <= f(x[,k]) #reflected point is between the best and worst
value2 = f(xr) <= f(x[,1]) #reflected point is the best
value3 = f(x[,k]) <= f(xr)
if (value1) {
x[,k+1] = xr
}
if (value2) { #if reflected point is better than x1, which is the best point
#compute the expanded point
xe = x0 + gamma * (xr - x0)
value2_1 = f(xe) <= f(xr) #; value2_1
value2_2 = f(xe) > f(xr) #; value2_2
if (value2_1) {
x[,k+1] = xe
}
if (value2_2) {
x[,k+1] = xr
}
}
if(value3){ #if  f(x1)<f(xr)
xc = x0 + rho*(x[,k+1]-x0) #calculate contracted point xc
value3_1 = f(xc)<f(x[,k+1]) # contracted point is the best now
if (value3_1) {
x[,k+1] = xc
}
}
value5 = abs(f(x[,1])-f(x[,2])) #; value5
value5_bool = value5 < tolerance #; value5_bool
if (value5_bool) {
craker = 1
}
steps = steps + 1
#print(as.numeric(f(x[,1]))  )
}
output = list(x[,1],f(x[,1]),steps)
names(output) = c('optimal x','lowest value','steps')
output
}
optimizer_NM_multivariate(f) #test the optimizer function
# preliminaries --------------------------------------------------------------
library(Hmisc)
library(optimx)
library(rmgarch)
library(tidyverse)
library(plotly)
library(rgl)
x <- seq(-10, 10, length.out = 50)
y <- x
rotsinc <- function(x,y) {
sinc <- function(x) { y <- sin(x)/x ; y[is.na(y)] <- 1; y }
10 * sinc( sqrt(x^2+y^2) )
}
z <- outer(x, y, rotsinc)
persp(x, y, z)
surface3d(x, y, z) #black color
open3d()
surface3d(x, y, z, color='red') #red
x
rotsinc
persp(x, y, z)
persp(x, y, z)
y
x
z
dim()
dim(z)
Likelihood <- function(phi0_lik,phi1_lik){
Likelihood  <- Likelihood  -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
Likelihood
}
Likelihood <- function(sigma_u_lik){
Likelihood  <- Likelihood  -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
Likelihood
}
Likelihood(1)
Likelihood
Likelihood
Likelihood <- function(sigma_u_lik){
Likelihood  <- -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
Likelihood
}
Likelihood(1)
range_sigma_u_lik
sigma_u
n = 1000 #time periods
phi0 = 1
phi1 = .4
sigma_u = 1
epsolon = rnorm(n,0,sigma_u)
y = double()
y[1] = 3 #initial value
for (t in 2:n) {
y[t] = phi0 + phi1*y[t-1] + epsolon[t]
}
plot(y,type='l')
sigma_u
sigma_u_lik <- sigma_u
phi0_lik <- phi0
phi1_lik <- phi1
Likelihood <- function(sigma_u_lik){
Likelihood  <- -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
Likelihood
}
Likelihood
Likelihood()
Likelihood(1)
Likelihood <- function(phi0_lik,phi1_lik){
Likelihood  <- -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
Likelihood
}
phi0
phi1
Likelihood(1,.4)
n = 1000 #time periods
phi0 = 1
phi1 = .4
sigma_u = 1
epsolon = rnorm(n,0,sigma_u)
y = double()
y[1] = 3 #initial value
for (t in 2:n) {
y[t] = phi0 + phi1*y[t-1] + epsolon[t]
}
plot(y,type='l')
Likelihood <- function(phi0_lik,phi1_lik){
Likelihood  <- -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
Likelihood
}
Likelihood(1,.4)
range_phi0_lik
range_phi1_lik
#graph 3 dimensional of phi0 and phi1    --------------------------
range_phi0_lik <- seq(0,5,by=.1)
range_phi1_lik <- seq(0,3,by=.05)
range_phi0_lik
range_phi1_lik
z <- outer(range_phi0_lik, range_phi1_lik, Likelihood)
dim(z)
surface3d(range_phi0_lik, range_phi1_lik, z, color='red') #red
Lkelihood <- double()
Lkelihood
sigma_u_lik <- sigma_u
phi0_lik <- phi0
phi1_lik <- phi1
Lkelihood <- double()
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
sigma_u_lik
sigma_u_lik
Lkelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
Like_func <- function(phi0_lik,phi1_lik){
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
}
Like_func(phi0_lik,phi1_lik)
z <- outer(range_phi0_lik, range_phi1_lik, Like_func)
dim(z)
surface3d(range_phi0_lik, range_phi1_lik, z, color='red') #red
range_phi0_lik
range_phi1_lik
z
#graph 3 dimensional of phi0 and phi1    --------------------------
range_phi0_lik <- seq(.3,3,by=.1)
range_phi1_lik <- seq(.3,3,by=.05)
Like_func <- function(phi0_lik,phi1_lik){
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
}
Like_func(phi0_lik,phi1_lik)
z <- outer(range_phi0_lik, range_phi1_lik, Like_func)
dim(z)
surface3d(range_phi0_lik, range_phi1_lik, z, color='red') #red
persp(range_phi0_lik, range_phi1_lik, z)
surface3d(range_phi0_lik, range_phi1_lik, z, color='red') #red
?persp()
range_phi0_lik
phi1
range_phi1_lik <- seq(.1,3,by=.05)
Like_func <- function(phi0_lik,phi1_lik){
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
}
Like_func(phi0_lik,phi1_lik)
z <- outer(range_phi0_lik, range_phi1_lik, Like_func)
dim(z)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3))
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = .2)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0, phi = 10)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0, phi = 9)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0, phi = 15)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0, phi = 15, ltheta=-140)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0, phi = 15, ltheta= -135)
surface3d(range_phi0_lik, range_phi1_lik, z, color='red') #red
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0, phi = 15, ltheta= -135, lphi=1)
persp(range_phi0_lik, range_phi1_lik, z,xlim = range(.5,3) , ylim = range(.1,3),
theta = 0, phi = 15, ltheta= -135, lphi=0)
persp(range_phi0_lik, range_phi1_lik,
theta = 0, phi = 15, ltheta= -135, lphi=0)
persp(range_phi0_lik, range_phi1_lik,z,
theta = 0, phi = 15, ltheta= -135, lphi=0)
persp(range_phi0_lik, range_phi1_lik,z)
persp(range_phi0_lik, range_phi1_lik,z,theta=1)
persp(range_phi0_lik, range_phi1_lik,z,theta=10)
persp(range_phi0_lik, range_phi1_lik,z,theta=100)
persp(range_phi0_lik, range_phi1_lik,z,theta=100,phi=50)
persp(range_phi0_lik, range_phi1_lik,z,theta=100,phi=30)
persp(range_phi0_lik, range_phi1_lik,z,theta=20,phi=30)
persp(range_phi0_lik, range_phi1_lik,z,theta=30,phi=30)
persp(range_phi0_lik, range_phi1_lik,z,theta=50,phi=30)
persp(range_phi0_lik, range_phi1_lik,z,theta=70,phi=30)
persp(range_phi0_lik, range_phi1_lik,z, theta=120, phi=30)
persp(range_phi0_lik, range_phi1_lik,z, theta=120, phi=40 )
persp(range_phi0_lik, range_phi1_lik,z, theta=120, phi=50 )
persp(range_phi0_lik, range_phi1_lik,z, theta=120, phi=40 )
persp(range_phi0_lik, range_phi1_lik,z, theta=120, phi=30 )
persp(range_phi0_lik, range_phi1_lik,z, theta=120, phi=20 )
range_phi0_lik <- seq(.3,3,by=.1)
range_phi1_lik <- seq(.2,3,by=.05)
sigma_u_lik <- sigma_u
phi0_lik <- phi0
phi1_lik <- phi1
Like_func <- function(phi0_lik,phi1_lik){
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
}
Like_func(phi0_lik,phi1_lik)
z <- outer(range_phi0_lik, range_phi1_lik, Like_func)
dim(z)
persp(range_phi0_lik, range_phi1_lik,z, theta=120, phi=20 )
ylag = y[n]
ylev = y[-1]
sigma_u_lik
-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2))
sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2)))
phi0_lik
Like_func <- function(phi0_lik=phi0,phi1_lik=phi1,sigma_u_lik=sigma_u){
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
}
Like_func()
ylag = y[-n]
ylev = y[-1]
like_func2 <- function(phi0_lik, phi1_lik, sigma_u_lik){
sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2)))
}
sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2)))
like_func2 <- function(phi0_lik, phi1_lik, sigma_u_lik){
sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2)))
}
parameters <- c(phi0_lik, phi1_lik, sigma_u_lik)
like_func3 <- function(parameters){
phi0_lik <- parameters[1]
phi1_lik <- parameters[2]
sigma_u_lik <- parameters[3]
sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2)))
}
parameters <- c(phi0_lik, phi1_lik, sigma_u_lik)
parameters
like_func3(parameters)
?optimx()
parameters <- c(0,0,0)
optimx(parameters,like_func3,method=c("Nelder-Mead","BFGS"))
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
like_func3(parameters)
parameters <- c(1,1,2)
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
parameters <- c(2,1,2)
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
parameters <- c(2,1,10)
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
?optim()
optim(parameters,like_func3,
method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN","Brent"))
optim(parameters,like_func3,
method = c("Nelder-Mead"))
optim(parameters,like_func3,
method = c("SANN"))
optim(parameters,like_func3,
method = c("Brent"))
optim(parameters,like_func3,
method = c("CG"))
optim(parameters,like_func3,
method = c("L-BFGS-B"))
optim(parameters,like_func3,
method = c("BFGS"))
library(Hmisc)
library(optimx)
library(rmgarch)
library(tidyverse)
library(plotly)
library(rgl)
n = 1000 #time periods
phi0 = 1
phi1 = .4
sigma_u = 1
epsolon = rnorm(n,0,sigma_u)
y = double()
y[1] = 3 #initial value
for (t in 2:n) {
y[t] = phi0 + phi1*y[t-1] + epsolon[t]
}
plot(y,type='l')
Like_func()
ylag = y[-n]
ylev = y[-1]
#a function for the maximum likelihood
Like_func <- function(phi0_lik=phi0,phi1_lik=phi1,sigma_u_lik=sigma_u){
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
}
Like_func()
#AR(1) simulation------------------------------------------------------------------------------------
n = 1000 #time periods
phi0 = 1
phi1 = .4
sigma_u = 1
epsolon = rnorm(n,0,sigma_u)
y = double()
y[1] = 3 #initial value
for (t in 2:n) {
y[t] = phi0 + phi1*y[t-1] + epsolon[t]
}
plot(y,type='l')
#a function for the maximum likelihood
Like_func <- function(phi0_lik=phi0,phi1_lik=phi1,sigma_u_lik=sigma_u){
Likelihood <- 0
for (t in 2:n) {
Likelihood  <- Likelihood -log(sigma_u_lik) -
.5*((y[t]-(phi0_lik + phi1_lik * y[t-1]))^2/(sigma_u_lik^2))
}
Likelihood
}
Like_func()
ylag = y[-n]
ylev = y[-1]
like_func2 <- function(phi0_lik, phi1_lik, sigma_u_lik){
sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2)))
}
like_func2(phi0_lik, phi1_lik, sigma_u_lik)
sigma_u_lik <- sigma_u
phi0_lik <- phi0
phi1_lik <- phi1
like_func2(phi0_lik, phi1_lik, sigma_u_lik)
like_func3 <- function(parameters){
phi0_lik <- parameters[1]
phi1_lik <- parameters[2]
sigma_u_lik <- parameters[3]
-1*(sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2))))
}
like_func3(parameters)
parameters <- c(phi0_lik, phi1_lik, sigma_u_lik)
like_func3(parameters)
parameters <- c(2,1,10) #for thr optimx function this is the starting values
like_func3(parameters)
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
optim(parameters,like_func3,
method = c("Nelder-Mead"))
optim(parameters,like_func3,
method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN","Brent"))
optim(parameters,like_func3,
method = c("SANN"))
optim(parameters,like_func3,
method = c("CG"))
optim(parameters,like_func3,
method = c("L-BFGS-B"))
optim(parameters,like_func3,
method = c("BFGS"))
n = 1000 #time periods
phi0 = 1
phi1 = .6
sigma_u = 1
epsolon = rnorm(n,0,sigma_u)
y = double()
y[1] = 3 #initial value
for (t in 2:n) {
y[t] = phi0 + phi1*y[t-1] + epsolon[t]
}
plot(y,type='l')
parameters <- c(phi0_lik, phi1_lik, sigma_u_lik)
like_func3 <- function(parameters){
phi0_lik <- parameters[1]
phi1_lik <- parameters[2]
sigma_u_lik <- parameters[3]
-1*(sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2))))
}
like_func3(parameters)
parameters <- c(10,1,10) #for thr optimx function this is the starting values
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
ylag = y[-n]
ylev = y[-1]
like_func3 <- function(parameters){
phi0_lik <- parameters[1]
phi1_lik <- parameters[2]
sigma_u_lik <- parameters[3]
-1*(sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2))))
}
like_func3(parameters)
parameters <- c(phi0_lik, phi1_lik, sigma_u_lik)
like_func3(parameters)
parameters <- c(10,1,10) #for thr optimx function this is the starting values
like_func3(parameters)
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
n = 10000 #time periods
phi0 = 1
phi1 = .6
sigma_u = 1
epsolon = rnorm(n,0,sigma_u)
y = double()
y[1] = 3 #initial value
for (t in 2:n) {
y[t] = phi0 + phi1*y[t-1] + epsolon[t]
}
plot(y,type='l')
parameters <- c(phi0_lik, phi1_lik, sigma_u_lik)
ylag = y[-n]
ylev = y[-1]
like_func3 <- function(parameters){
phi0_lik <- parameters[1]
phi1_lik <- parameters[2]
sigma_u_lik <- parameters[3]
-1*(sum(-log(sigma_u_lik) - .5*((ylev-(phi0_lik + phi1_lik * ylag))^2/(sigma_u_lik^2))))
}
like_func3(parameters)
parameters <- c(10,1,10) #for thr optimx function this is the starting values
like_func3(parameters)
optimx(parameters,like_func3,lower=-Inf, upper=Inf, method=c("Nelder-Mead","BFGS"))
